import { beforeAll, describe, expect, it } from "vitest";
import ori_im_list from "./ori_im_list_before_cls.json" with { type: "json" };
import ori_im from "./ori_im.json" with { type: "json" };
import ori_poly_im_list from "./ori_im_list_rect.json" with { type: "json" };
import type { Mat } from "@techstark/opencv-js";
import type { Box, CV2, ORT, Point } from "../../types/type.js";
import { getImgCropList } from "./get-crop.js";
import { matToList } from "../func.js";
import { blake2bHex } from "blakejs";

let cv: CV2;
let ori_im_mat: Mat; // must clone before use
const shape: [number, number, number] = [579, 584, 3];
const boxes: Box[] = [
  [
    [89, 417],
    [379, 428],
    [376, 523],
    [86, 512],
  ],
  [
    [21, 229],
    [559, 229],
    [559, 341],
    [21, 341],
  ],
  [
    [276, 121],
    [332, 121],
    [332, 180],
    [276, 180],
  ],
];
const polyBoxes: Point[][] = [
  [
    [395, 162],
    [394, 160],
    [395, 159],
    [394, 157],
    [394, 149],
    [395, 147],
    [397, 146],
    [399, 147],
    [399, 148],
    [400, 149],
    [403, 150],
    [410, 150],
    [412, 151],
    [412, 152],
    [413, 153],
    [414, 153],
    [416, 154],
    [417, 155],
    [418, 157],
    [419, 158],
    [420, 157],
    [421, 157],
    [423, 158],
    [424, 158],
    [426, 157],
    [428, 158],
    [429, 160],
    [429, 161],
    [428, 163],
    [428, 168],
    [429, 169],
    [428, 171],
    [428, 172],
    [427, 174],
    [425, 175],
    [412, 175],
    [410, 174],
    [409, 172],
    [410, 171],
    [408, 170],
    [407, 168],
    [407, 167],
    [406, 167],
    [404, 166],
    [403, 164],
    [403, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
    [397, 163],
  ],
  [
    [324, 173],
    [319, 175],
    [296, 175],
    [292, 174],
    [290, 172],
    [290, 170],
    [288, 170],
    [286, 168],
    [285, 164],
    [285, 157],
    [286, 155],
    [285, 154],
    [285, 153],
    [283, 151],
    [281, 146],
    [281, 141],
    [282, 137],
    [284, 135],
    [285, 135],
    [285, 133],
    [286, 129],
    [288, 127],
    [292, 126],
    [319, 126],
    [323, 127],
    [325, 129],
    [326, 133],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
    [326, 170],
  ],
  [
    [161, 233],
    [168, 233],
    [264, 241],
    [346, 237],
    [518, 237],
    [528, 239],
    [535, 242],
    [541, 246],
    [548, 253],
    [551, 258],
    [554, 265],
    [555, 271],
    [557, 300],
    [557, 308],
    [553, 318],
    [549, 324],
    [543, 330],
    [536, 334],
    [530, 336],
    [519, 338],
    [514, 338],
    [92, 339],
    [89, 339],
    [55, 335],
    [47, 333],
    [41, 329],
    [36, 327],
    [32, 323],
    [28, 317],
    [25, 310],
    [24, 302],
    [24, 271],
    [25, 263],
    [28, 256],
    [32, 250],
    [39, 246],
    [44, 244],
    [57, 239],
    [67, 237],
    [131, 238],
    [138, 236],
    [146, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
    [154, 235],
  ],
  [
    [278, 441],
    [283, 440],
    [287, 440],
    [293, 441],
    [300, 440],
    [321, 440],
    [322, 439],
    [327, 437],
    [333, 436],
    [352, 436],
    [358, 437],
    [363, 440],
    [367, 444],
    [369, 450],
    [369, 455],
    [368, 457],
    [368, 461],
    [364, 469],
    [361, 473],
    [357, 476],
    [355, 478],
    [352, 480],
    [347, 484],
    [343, 485],
    [342, 486],
    [337, 488],
    [335, 489],
    [328, 490],
    [324, 489],
    [322, 490],
    [312, 491],
    [310, 492],
    [304, 493],
    [302, 493],
    [299, 494],
    [296, 496],
    [291, 499],
    [284, 498],
    [280, 499],
    [279, 499],
    [275, 501],
    [271, 501],
    [269, 502],
    [267, 502],
    [264, 505],
    [258, 507],
    [251, 507],
    [221, 508],
    [219, 508],
    [134, 504],
    [128, 503],
    [126, 501],
    [108, 490],
    [103, 486],
    [101, 480],
    [100, 475],
    [100, 472],
    [99, 470],
    [97, 464],
    [97, 458],
    [99, 454],
    [100, 449],
    [104, 443],
    [107, 440],
    [113, 437],
    [117, 435],
    [116, 435],
    [119, 433],
    [126, 432],
    [134, 432],
    [136, 431],
    [142, 430],
    [174, 430],
    [211, 432],
    [217, 433],
    [218, 434],
    [242, 434],
    [254, 436],
    [257, 437],
    [260, 437],
    [268, 439],
    [270, 440],
    [275, 440],
  ],
];

beforeAll(async () => {
  /// @ts-ignore
  const cvReadyPromise = require("@techstark/opencv-js");
  // const nodeORT = require("onnxruntime-node");
  // ort = nodeORT;
  cv = await cvReadyPromise;
  ori_im_mat = cv.matFromArray(
    shape[0],
    shape[1],
    cv.CV_8UC3,
    Uint8Array.from((ori_im as number[][][]).flat(2)),
  );
});

describe("crop-and-rect-img", () => {
  it("get_minarea_rect_crop", async () => {
    const result = getImgCropList(ori_im_mat.clone(), boxes, "quad", cv);
    const listResult = result.map((mat) => matToList(mat, cv) as number[][][]);
    expect(listResult.length).toBe(boxes.length);
    expect(listResult[0]!.slice(0, 10)).toEqual(
      (ori_im_list as number[][][][])[0]!.slice(0, 10),
    );
    expect(listResult[1]!.slice(0, 10)).toEqual(
      (ori_im_list as number[][][][])[1]!.slice(0, 10),
    );
    expect(listResult[2]!.slice(0, 10)).toEqual(
      (ori_im_list as number[][][][])[2]!.slice(0, 10),
    );
    const resultHash = blake2bHex(Uint8Array.from(listResult.flat(3)));
    const trueHash = blake2bHex(
      Uint8Array.from((ori_im_list as number[][][][]).flat(3)),
    );
    expect(resultHash).toBe(trueHash);
    // console.log(Uint8Array.from(listResult.flat(3)));
    // expect(Uint8Array.from(listResult.flat(3)));
  });
  it("get_rotate_crop_image", async () => {
    const result = getImgCropList(ori_im_mat.clone(), polyBoxes, "poly", cv);
    const listResult = result.map((mat) => matToList(mat, cv) as number[][][]);
    expect(listResult.length).toBe(polyBoxes.length);
    expect(listResult[0]!.slice(0, 10)).toEqual(
      (ori_poly_im_list as number[][][][])[0]!.slice(0, 10),
    );
    expect(listResult[1]!.slice(0, 10)).toEqual(
      (ori_poly_im_list as number[][][][])[1]!.slice(0, 10),
    );
    expect(listResult[2]!.slice(0, 10)).toEqual(
      (ori_poly_im_list as number[][][][])[2]!.slice(0, 10),
    );
    const resultHash = blake2bHex(Uint8Array.from(listResult.flat(3)));
    const trueHash = blake2bHex(
      Uint8Array.from((ori_poly_im_list as number[][][][]).flat(3)),
    );
    expect(resultHash).toBe(trueHash);
  });
});
